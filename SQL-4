// update the data (UPDATE)

1. update the salary of user whose id is 1 to 45000 -->
** never use UPDATE without WHERE because it will change the whole database if not careful
UPDATE users SET salary = 45000 WHERE id = 1;

2. in the previous update the email also -->
UPDATE users SET salary = 45000, email = 'arav@223gmail.com' WHERE id = 1;

3. change the name of user with email 'aisha@example.com' to Aisha Khan -->
UPDATE users SET name = 'Aisha Khan' WHERE email = 'aisha@example.com';

4. increase the salary of all users by 10,000 whose salary is less than 60,000 -->
UPDATE users SET salary=salary+10000 WHERE salary < 60000;

// delete the data (DELETE)

** similar to update, use delete with caution, always with where clause
1. delete where salary is less than 55000 --> DELETE FROM users WHERE salary < 55000;


2. delete where id  = 3 --> DELETE FROM users WHERE id = 3;

// constraints in MySQL 

**  rules apply on columns to ensure integrity, validation, and accuracy

1. UNIQUE --> all values are unique

2. NOT NULL --> column cannot contain NULL values

3. PRIMARY KEY --> uniquely identifies each record in a table (combines NOT NULL and UNIQUE; only one per table)

4. FOREIGN KEY --> ensures referential integrity by linking to a primary key in another table (prevents invalid references)

5. CHECK --> ensures values in a column satisfy a specific condition (e.g., age > 18; supported in MySQL 8.0+)

6. DEFAULT --> provides a default value for a column if no value is specified during INSERT

7. AUTO_INCREMENT --> automatically generates sequential unique values for a column (typically used with PRIMARY KEY; e.g., for IDs)

8. apply constraint to users on column email as primary key -->
ALTER TABLE users ADD CONSTRAINT pk_users_email PRIMARY KEY (email);

9. apply constraint that gender column will be not null -->
ALTER TABLE users ADD CONSTRAINT chk_gender_not_null CHECK (gender IS NOT NULL);
 